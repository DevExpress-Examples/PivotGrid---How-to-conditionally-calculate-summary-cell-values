#pragma checksum "A:\Programming\DevExtreme\DevExtreme Examples\how-to-conditionally-calculate-summary-cell-values\MVCCore\SampleApp\SampleApp\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "038fca8280ebbc1dae68c39765f935ffc67b8a21"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(SampleApp.Models.Home.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace SampleApp.Models.Home
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "A:\Programming\DevExtreme\DevExtreme Examples\how-to-conditionally-calculate-summary-cell-values\MVCCore\SampleApp\SampleApp\Views\_ViewImports.cshtml"
using SampleApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "A:\Programming\DevExtreme\DevExtreme Examples\how-to-conditionally-calculate-summary-cell-values\MVCCore\SampleApp\SampleApp\Views\_ViewImports.cshtml"
using DevExtreme.AspNet.Mvc;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "A:\Programming\DevExtreme\DevExtreme Examples\how-to-conditionally-calculate-summary-cell-values\MVCCore\SampleApp\SampleApp\Views\Home\Index.cshtml"
using SampleApp.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"038fca8280ebbc1dae68c39765f935ffc67b8a21", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"47d7d76fe970a0d7fb21f5de1f0693685216e8e1", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/data/sales.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n<h2 class=\"content-block\">Home</h2>\r\n<div class=\"long-title\"><h3>Sales Amount by Region</h3></div>\r\n\r\n");
#nullable restore
#line 6 "A:\Programming\DevExtreme\DevExtreme Examples\how-to-conditionally-calculate-summary-cell-values\MVCCore\SampleApp\SampleApp\Views\Home\Index.cshtml"
Write(Html.DevExtreme().PivotGrid()
.ID("sales")
.AllowSortingBySummary(true)
.AllowSorting(true)
.AllowFiltering(true)
.AllowExpandAll(true)
.Height(440)
.ShowColumnGrandTotals(false)
.ShowColumnTotals(false)
.ShowBorders(true)
.FieldChooser(c => c.Enabled(false))
.DataSource(d => d
    .Store(new JS("sales"))
    .Fields(fields => {
    fields.Add()
            .Caption("Region")
            .Width(120)
            .DataField("Region")
            .Area(PivotGridArea.Row)
            .Expanded(true);

    fields.Add()
            .Caption("City")
            .Width(150)
            .DataField("City")
            .Area(PivotGridArea.Row)
            .Selector(item => new global::Microsoft.AspNetCore.Mvc.Razor.HelperResult(async(__razor_template_writer) => {
    PushWriter(__razor_template_writer);
    WriteLiteral("\r\n                    function(data) {\r\n                        return data.City + \" (\" + data.Country + \")\";\r\n                    }\r\n                ");
    PopWriter();
}
));

        fields.Add()
            .DataField("Date")
            .DataType(PivotGridDataType.Date)
            .Area(PivotGridArea.Column)
            .Expanded(true);

        fields.Add()
            .Caption("Sales")
            .DataType(PivotGridDataType.Number)
            .SummaryType(SummaryType.Custom)
            .Format(Format.Currency)
            .Area(PivotGridArea.Data)
            .CalculateCustomSummary("calculateCustomSummary");

        fields.Add()
            .Caption("Approved")
            .DataField("isApproved")
            .SummaryType(SummaryType.Sum)
            .Area(PivotGridArea.Data);
    })
    )
);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<div class=\"options\">\r\n    <div class=\"caption\">Options</div>\r\n    <div class=\"option\">\r\n        ");
#nullable restore
#line 63 "A:\Programming\DevExtreme\DevExtreme Examples\how-to-conditionally-calculate-summary-cell-values\MVCCore\SampleApp\SampleApp\Views\Home\Index.cshtml"
    Write(Html.DevExtreme().CheckBox()
            .Value(new JS("isConditional"))
            .Text("Toggle Conditional Summary Calculation")
            .OnValueChanged("onValueChanged")
        );

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n    </div>\r\n</div>\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "038fca8280ebbc1dae68c39765f935ffc67b8a216627", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<script>
    let isConditional = true;

    sales.forEach((sale, index) => {
        sale.isApproved = index % 2 !== 0;
    });

    function onValueChanged(data) {
        let pivotGrid = $(""#sales"").dxPivotGrid('instance'),
            ds = pivotGrid.getDataSource();

        isConditional = data.value
        ds.reload()
    }

    function calculateCustomSummary(options) {
        switch (options.summaryProcess) {
            case ""start"":
                options.totalValue = { conditionalVal: 0, rawVal: 0, count: 0 };
                break;
            case ""calculate"":
                options.totalValue.count += 1;
                options.totalValue.rawVal += options.value.Amount;
                if (options.value.isApproved) {
                    options.totalValue.conditionalVal += options.value.Amount;
                }
                break;
            case ""finalize"":
                if (options.totalValue.count === 1 || !isConditional) {
                    // If no");
            WriteLiteral(@"t conditional, this block will always be run
                    options.totalValue = options.totalValue.rawVal;
                } else {
                    options.totalValue = options.totalValue.conditionalVal;
                }
        }
    }
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
